generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String          @id @default(uuid())
  fullName       String          @db.VarChar(50)
  userName       String?         @db.VarChar(30)
  email          String          @unique @db.VarChar(100) // Index added
  password       String          @db.VarChar(150)
  mobile         String          @unique @db.VarChar(11) // Index added
  gender         Gender
  role           Role
  age            Int
  dateOfBirth    String          @db.VarChar(25)
  address        String          @db.VarChar(100)
  occupation     Occupation
  refreshToken   String?
  avatar         String?
  coverImage     String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  searchRequests SearchRequest[]
  chats          ChatRoom[]      @relation("UserChats")
  messages       Message[]       @relation("UserMessages")

  @@index([fullName, userName]) // Index for faster name-based searches
  @@map(name: "users")
}

model BookMark {
  id       String @id @default(cuid())
  userId   String @db.VarChar(100)
  markedId String @db.VarChar(100)

  @@index([userId, markedId]) // Index for faster searches on bookmarks
  @@map(name: "bookmarks")
}

enum Gender {
  male
  female
  others
}

enum Role {
  traveler
  sharer
}

enum Occupation {
  student
  corporate
}

model Location {
  id                     String              @id @default(uuid())
  uniqueIdentifier       String              @db.VarChar(50)
  locationName           String              @db.VarChar(100)
  connectedLocationsFrom ConnectedLocation[] @relation("FromLocation")
  connectedLocationsTo   ConnectedLocation[] @relation("ToLocation")

  @@index([uniqueIdentifier])
  @@index([locationName])
}

model ConnectedLocation {
  id             String   @id @default(uuid())
  fromLocationId String
  toLocationId   String
  fromLocation   Location @relation("FromLocation", fields: [fromLocationId], references: [id])
  toLocation     Location @relation("ToLocation", fields: [toLocationId], references: [id])
  distance       Int?

  @@index([fromLocationId, toLocationId])
}

model SearchRequest {
  id                    String   @id @default(uuid())
  fullName              String   @db.VarChar(50)
  email                 String   @db.VarChar(100)
  gender                String   @db.VarChar(10)
  role                  String   @db.VarChar(20)
  currentLocation       String   @db.VarChar(100)
  destinationLocation   String   @db.VarChar(100)
  filterVehicleType     String?  @db.VarChar(20)
  filterVehicleCapacity String?  @db.VarChar(20)
  filterGenderType      String?  @db.VarChar(10)
  matched               Boolean
  userId                String
  user                  User     @relation(fields: [userId], references: [id])
  createdAt             DateTime @default(now())
  updatedAt             DateTime @default(now())

  @@index([fullName, email, currentLocation, destinationLocation]) // Index for common search fields
  @@map(name: "search-request")
}

model ChatRoom {
  id       String    @id @default(uuid())
  name     String
  users    User[]    @relation("UserChats")
  messages Message[]

  @@map(name: "chat-rooms")
}

model Message {
  id         String   @id @default(uuid())
  content    String
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
  chatRoomId String
  sender     User     @relation("UserMessages", fields: [senderId], references: [id])
  senderId   String
  createdAt  DateTime @default(now())

  @@index([chatRoomId, senderId]) // Index for faster message retrieval by chat room and sender
  @@map(name: "messages")
}
